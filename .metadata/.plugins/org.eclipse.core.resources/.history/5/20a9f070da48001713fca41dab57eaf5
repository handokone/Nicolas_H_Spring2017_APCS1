package textExcel;

public class FormulaCell extends RealCell{
	private String userInput = "";
	private Cell[][] sheet;
	public FormulaCell(String formula, Cell[][] arr){
		super(formula);
		userInput = formula;
		sheet = arr;
	}
	
	//from RealCell
	public String abbreviatedCellText(){
		return (getDoubleValue() + "          ").substring(0, 10);
	}
	
	//from RealCell
	public String fullCellText(){
		return userInput;
	}
	
	public double getDoubleValue(){
		double sum = 0.0;
		//Gets rid of parenthesis in the formula. 
		String form = userInput.substring(2, userInput.length() - 2);
		String[] formulaArr = form.trim().split(" ");
		//Just in case if declaration is (for example) A2 = ( 2 );
		if(formulaArr.length == 1){
			return Double.parseDouble(form);
		}else if(form.toUpperCase().indexOf("SUM") != -1){
			String[] range = formulaArr[1].toUpperCase().split("-");
			return sum(range[0], range[0], range[1]);
		}else if(form.toUpperCase().indexOf("AVG") != -1){
			String[] range = formulaArr[1].toUpperCase().split("-");
			//starting value for outer loop
			char firstName = (range[0].toLowerCase()).charAt(0);
			//ending value for outer loop
			char secondName = (range[1].toLowerCase()).charAt(0);
			//starting value for inner loop
			int firstCellNum = Integer.parseInt(range[0].substring(1));
			//ending value for inner loop
			int secondCellNum = Integer.parseInt(range[1].substring(1));
			//Counter used as a divisor
			int count = 0;
			//Nester for loop in order to find how many cells are included in the cell range. 
			for (char i = firstName; i <= secondName; i++) {
				for (int j = firstCellNum; j <= secondCellNum; j++) {
					count++;
				}
			}
			//Used the sum method because average is the sum / # of inputs.
			return sum(range[0], range[0], range[1]) / count;
		}else{
			if(formulaArr[0].toUpperCase().charAt(0) >= 'A' && formulaArr[0].toUpperCase().charAt(0) <='L'){
				SpreadsheetLocation cellLoc = new SpreadsheetLocation(formulaArr[0]);
					sum = ((RealCell) sheet[cellLoc.getRow()][cellLoc.getCol()]).getDoubleValue();
			}else{
				sum = Double.parseDouble(formulaArr[0]);
			}
			for(int i = 1; i < formulaArr.length - 1; i += 2 ){
				//checks whether number or a cell
				double num = 0.0;
				if(formulaArr[i + 1].toUpperCase().charAt(0) >= 'A' && formulaArr[i + 1].toUpperCase().charAt(0) <='L'){
						formulaArr[i + 1] = formulaArr[i + 1].toUpperCase();
						SpreadsheetLocation loc = new SpreadsheetLocation(formulaArr[i + 1]);
						if(sheet[loc.getRow()][loc.getCol()] instanceof RealCell){
							//casts to RealCell to call doubleValue
							num = ((RealCell)sheet[loc.getRow()][loc.getCol()]).getDoubleValue();
						}
				}else{
					num = Double.parseDouble(formulaArr[i + 1]);
				}
				if(formulaArr[i].equals("/")){
					sum /=  num;
				}else if(formulaArr[i].equals("*")){
					sum *= num;
				}else if(formulaArr[i].equals("+")){
					sum += num;
				}else{
					sum -= num;
				}
			}
		}
		return sum;
	}
	
	public double sum(String beginning, String changedCell, String end){	
		SpreadsheetLocation loc = new SpreadsheetLocation(changedCell);
		//base case
		if(changedCell.equals(end)){
			if(sheet[loc.getRow()][loc.getCol()] instanceof RealCell){
				return ((RealCell)sheet[loc.getRow()][loc.getCol()]).getDoubleValue();
			}else{
				return 0.0;
			}
		}
		//Case 1: if the columns aren't the same, but the rows are, move horizontally
		if(Character.toUpperCase(beginning.charAt(0)) != Character.toUpperCase(end.charAt(0)) 
				&& Integer.parseInt(beginning.substring(1)) == Integer.parseInt(end.substring(1))){
			changedCell = ((char)(changedCell.charAt(0) + 1)) + beginning.substring(1);
			//if the columns are the same,but the rows are not, move vertically
		}else if(Character.toUpperCase(beginning.charAt(0)) == Character.toUpperCase(end.charAt(0))
				&& Integer.parseInt(beginning.substring(1)) <= Integer.parseInt(end.substring(1))){
			
			changedCell = Character.toString(beginning.charAt(0)) + (Integer.parseInt(changedCell.substring(1)) + 1);
			
			//if the columns and the rows aren't the same, move through all of the cells
		}else{
			//when row is less than the ending row, keep going down
			if(Integer.parseInt(changedCell.substring(1)) < Integer.parseInt(end.substring(1))){
				changedCell = Character.toString(changedCell.charAt(0)) + (Integer.parseInt(changedCell.substring(1)) + 1);
				//if the rows are the same, reset and move to next column
			}else if(Integer.parseInt(changedCell.substring(1)) == Integer.parseInt(end.substring(1))){
				changedCell = ((char)(changedCell.charAt(0) + 1)) + "" + beginning.substring(1);
			}
		}
		//gets the value of the cell and keeps it and returns it
		double first =0.0;
		if(sheet[loc.getRow()][loc.getCol()] instanceof RealCell){
			 first = ((RealCell)sheet[loc.getRow()][loc.getCol()]).getDoubleValue();
			return (first + sum(beginning, changedCell, end));
		}else{
			return sum(beginning, changedCell, end);
		}
	}
}